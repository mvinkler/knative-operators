apiVersion: networking.istio.io/v1alpha3
kind: Gateway
metadata:
  name: knative-ingress-gateway
spec:
  selector:
    istio: ingressgateway
  servers:
  - hosts:
    - '*'
    port:
      name: http
      number: 80
      protocol: HTTP
  - hosts:
    - '*'
    port:
      name: https
      number: 443
      protocol: HTTPS
    tls:
      mode: PASSTHROUGH
---
apiVersion: networking.istio.io/v1alpha3
kind: Gateway
metadata:
  name: knative-shared-gateway
spec:
  selector:
    knative: ingressgateway
  servers:
  - hosts:
    - '*'
    port:
      name: http
      number: 80
      protocol: HTTP
  - hosts:
    - '*'
    port:
      name: https
      number: 443
      protocol: HTTPS
    tls:
      mode: PASSTHROUGH
---
apiVersion: v1
kind: Service
metadata:
  annotations: null
  labels:
    app: knative-ingressgateway
    chart: gateways-1.0.1
    heritage: Tiller
    knative: ingressgateway
    release: RELEASE-NAME
  name: knative-ingressgateway
  namespace: istio-system
spec:
  ports:
  - name: http2
    nodePort: 32380
    port: 80
    targetPort: 80
  - name: https
    nodePort: 32390
    port: 443
  - name: tcp
    nodePort: 32400
    port: 31400
  - name: tcp-pilot-grpc-tls
    port: 15011
    targetPort: 15011
  - name: tcp-citadel-grpc-tls
    port: 8060
    targetPort: 8060
  - name: tcp-dns-tls
    port: 853
    targetPort: 853
  - name: http2-prometheus
    port: 15030
    targetPort: 15030
  - name: http2-grafana
    port: 15031
    targetPort: 15031
  selector:
    app: knative-ingressgateway
    knative: ingressgateway
  type: LoadBalancer
---
apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  labels:
    app: knative-ingressgateway
    chart: gateways-1.0.1
    heritage: Tiller
    knative: ingressgateway
    release: RELEASE-NAME
  name: knative-ingressgateway
  namespace: istio-system
spec:
  replicas: 1
  selector:
    matchLabels:
      app: knative-ingressgateway
      knative: ingressgateway
  template:
    metadata:
      annotations:
        scheduler.alpha.kubernetes.io/critical-pod: ""
        sidecar.istio.io/inject: "false"
      labels:
        app: knative-ingressgateway
        knative: ingressgateway
    spec:
      affinity:
        nodeAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - preference:
              matchExpressions:
              - key: beta.kubernetes.io/arch
                operator: In
                values:
                - amd64
            weight: 2
          - preference:
              matchExpressions:
              - key: beta.kubernetes.io/arch
                operator: In
                values:
                - ppc64le
            weight: 2
          - preference:
              matchExpressions:
              - key: beta.kubernetes.io/arch
                operator: In
                values:
                - s390x
            weight: 2
          requiredDuringSchedulingIgnoredDuringExecution:
            nodeSelectorTerms:
            - matchExpressions:
              - key: beta.kubernetes.io/arch
                operator: In
                values:
                - amd64
                - ppc64le
                - s390x
      containers:
      - args:
        - proxy
        - router
        - -v
        - "2"
        - --discoveryRefreshDelay
        - 1s
        - --drainDuration
        - 45s
        - --parentShutdownDuration
        - 1m0s
        - --connectTimeout
        - 10s
        - --serviceCluster
        - knative-ingressgateway
        - --zipkinAddress
        - zipkin:9411
        - --proxyAdminPort
        - "15000"
        - --controlPlaneAuthPolicy
        - NONE
        - --discoveryAddress
        - istio-pilot:8080
        env:
        - name: POD_NAME
          valueFrom:
            fieldRef:
              apiVersion: v1
              fieldPath: metadata.name
        - name: POD_NAMESPACE
          valueFrom:
            fieldRef:
              apiVersion: v1
              fieldPath: metadata.namespace
        - name: INSTANCE_IP
          valueFrom:
            fieldRef:
              apiVersion: v1
              fieldPath: status.podIP
        - name: ISTIO_META_POD_NAME
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        image: docker.io/istio/proxyv2:1.0.2
        imagePullPolicy: IfNotPresent
        name: istio-proxy
        ports:
        - containerPort: 80
        - containerPort: 443
        - containerPort: 31400
        - containerPort: 15011
        - containerPort: 8060
        - containerPort: 853
        - containerPort: 15030
        - containerPort: 15031
        resources:
          requests:
            cpu: 10m
        volumeMounts:
        - mountPath: /etc/certs
          name: istio-certs
          readOnly: true
        - mountPath: /etc/istio/ingressgateway-certs
          name: ingressgateway-certs
          readOnly: true
        - mountPath: /etc/istio/ingressgateway-ca-certs
          name: ingressgateway-ca-certs
          readOnly: true
      serviceAccountName: istio-ingressgateway-service-account
      volumes:
      - name: istio-certs
        secret:
          optional: true
          secretName: istio.istio-ingressgateway-service-account
      - name: ingressgateway-certs
        secret:
          optional: true
          secretName: istio-ingressgateway-certs
      - name: ingressgateway-ca-certs
        secret:
          optional: true
          secretName: istio-ingressgateway-ca-certs
---
apiVersion: autoscaling/v2beta1
kind: HorizontalPodAutoscaler
metadata:
  name: knative-ingressgateway
  namespace: istio-system
spec:
  maxReplicas: 10
  metrics:
  - resource:
      name: cpu
      targetAverageUtilization: 60
    type: Resource
  minReplicas: 1
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: knative-ingressgateway

---
apiVersion: networking.istio.io/v1alpha3
kind: Gateway
metadata:
  name: cluster-local-gateway
spec:
  selector:
    istio: cluster-local-gateway
  servers:
  - hosts:
    - '*'
    port:
      name: http
      number: 80
      protocol: HTTP

---
apiVersion: v1
kind: Service
metadata:
  labels:
    app: activator
  name: activator-service
spec:
  ports:
  - name: http
    nodePort: null
    port: 80
    protocol: TCP
    targetPort: 8080
  - name: metrics
    nodePort: null
    port: 9090
    protocol: TCP
    targetPort: 9090
  selector:
    app: activator
  type: ClusterIP

---
apiVersion: v1
kind: Service
metadata:
  labels:
    app: controller
  name: controller
spec:
  ports:
  - name: metrics
    port: 9090
    protocol: TCP
    targetPort: 9090
  selector:
    app: controller

---
apiVersion: v1
kind: Service
metadata:
  labels:
    role: webhook
  name: webhook
spec:
  ports:
  - port: 443
    targetPort: 443
  selector:
    role: webhook

---
apiVersion: caching.internal.knative.dev/v1alpha1
kind: Image
metadata:
  name: queue-proxy
spec:
  image: registry.svc.ci.openshift.org/openshift/knative-v0.3:knative-serving-queue
---
apiVersion: caching.internal.knative.dev/v1alpha1
kind: Image
metadata:
  name: fluentd-sidecar
spec:
  image: k8s.gcr.io/fluentd-elasticsearch:v2.0.4

---
apiVersion: v1
kind: Service
metadata:
  labels:
    app: autoscaler
  name: autoscaler
spec:
  ports:
  - name: http
    port: 8080
    protocol: TCP
    targetPort: 8080
  - name: metrics
    port: 9090
    protocol: TCP
    targetPort: 9090
  selector:
    app: autoscaler

---
apiVersion: v1
data:
  container-concurrency-target-default: "100"
  container-concurrency-target-percentage: "1.0"
  enable-scale-to-zero: "true"
  enable-vertical-pod-autoscaling: "false"
  max-scale-up-rate: "10"
  panic-window: 6s
  scale-to-zero-grace-period: 30s
  stable-window: 60s
  tick-interval: 2s
kind: ConfigMap
metadata:
  name: config-autoscaler

---
apiVersion: v1
data:
  queueSidecarImage: registry.svc.ci.openshift.org/openshift/knative-v0.3:knative-serving-queue
  registriesSkippingTagResolving: ko.local,dev.local
kind: ConfigMap
metadata:
  name: config-controller

---
apiVersion: v1
data:
  example.com: ""
kind: ConfigMap
metadata:
  name: config-domain

---
apiVersion: v1
data:
  stale-revision-create-delay: 24h
  stale-revision-lastpinned-debounce: 5h
  stale-revision-minimum-generations: "1"
  stale-revision-timeout: 15h
kind: ConfigMap
metadata:
  name: config-gc

---
apiVersion: v1
data:
  gateway.knative-ingress-gateway: istio-ingressgateway.istio-system.svc.cluster.local
  gateway.knative-shared-gateway: knative-ingressgateway.istio-system.svc.cluster.local
  local-gateway.cluster-local-gateway: cluster-local-gateway.istio-system.svc.cluster.local
kind: ConfigMap
metadata:
  name: config-istio

---
apiVersion: v1
data:
  loglevel.activator: info
  loglevel.autoscaler: info
  loglevel.controller: info
  loglevel.queueproxy: info
  loglevel.webhook: info
  zap-logger-config: |
    {
      "level": "info",
      "development": false,
      "outputPaths": ["stdout"],
      "errorOutputPaths": ["stderr"],
      "encoding": "json",
      "encoderConfig": {
        "timeKey": "ts",
        "levelKey": "level",
        "nameKey": "logger",
        "callerKey": "caller",
        "messageKey": "msg",
        "stacktraceKey": "stacktrace",
        "lineEnding": "",
        "levelEncoder": "",
        "timeEncoder": "iso8601",
        "durationEncoder": "",
        "callerEncoder": ""
      }
    }
kind: ConfigMap
metadata:
  name: config-logging

---
apiVersion: v1
data:
  istio.sidecar.includeOutboundIPRanges: '*'
kind: ConfigMap
metadata:
  name: config-network

---
apiVersion: v1
data:
  logging.enable-var-log-collection: "false"
  logging.fluentd-sidecar-image: k8s.gcr.io/fluentd-elasticsearch:v2.0.4
  logging.fluentd-sidecar-output-config: |
    # Parse json log before sending to Elastic Search
    <filter **>
      @type parser
      key_name log
      <parse>
        @type multi_format
        <pattern>
          format json
          time_key fluentd-time # fluentd-time is reserved for structured logs
          time_format %Y-%m-%dT%H:%M:%S.%NZ
        </pattern>
        <pattern>
          format none
          message_key log
        </pattern>
      </parse>
    </filter>
    # Send to Elastic Search
    <match **>
      @id elasticsearch
      @type elasticsearch
      @log_level info
      include_tag_key true
      # Elasticsearch service is in monitoring namespace.
      host elasticsearch-logging.knative-monitoring
      port 9200
      logstash_format true
      <buffer>
        @type file
        path /var/log/fluentd-buffers/kubernetes.system.buffer
        flush_mode interval
        retry_type exponential_backoff
        flush_thread_count 2
        flush_interval 5s
        retry_forever
        retry_max_interval 30
        chunk_limit_size 2M
        queue_limit_length 8
        overflow_action block
      </buffer>
    </match>
  logging.revision-url-template: |
    http://localhost:8001/api/v1/namespaces/knative-monitoring/services/kibana-logging/proxy/app/kibana#/discover?_a=(query:(match:(kubernetes.labels.knative-dev%2FrevisionUID:(query:'${REVISION_UID}',type:phrase))))
  metrics.backend-destination: prometheus
kind: ConfigMap
metadata:
  name: config-observability
---
